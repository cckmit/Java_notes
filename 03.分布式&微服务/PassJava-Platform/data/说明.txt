# 创建项目和添加模块

# 数据库
chms渠道微服务
cms内容微服务
qms题目微服务
sms学习微服务
ums用户微服务

# 搭建管理后台

# 自动生成前后端代码


# 整合MyBatis-Plus实现CRUD

# 生成五大微服务的CRUD代码

# SpringCloud Alibaba 组件简介
Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。
此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。

依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。

Spring Cloud的几大痛点
- 部分组件停止维护和更新，有问题也不易解决
- 部分环境搭建起来比较复杂，没有非常友好的可视化界面
- 配置相对来说复杂，需要较高的学习成本

Spring Cloud Alibaba的优势
- 阿里经历过了时间的考验
- 设计合理
- 拥有不错的可视化界面，方便运维监控和排查问题
- 环境搭建和配置简单，学习成本低

最后技术选型：
- Spring Cloud Alibaba - Nacos 实现注册中心
- Spring Cloud Alibaba - Nacos 实现配置中心
- Spring Cloud Alibaba - Sentinel  实现服务容错
- Spring Cloud Alibaba - Seata 实现分布式事务

- Spring Cloud - Ribbon 实现负载均衡
- Spring Cloud - Feign 实现远程调用
- Spring Cloud - Gateway API网关
- Spring Cloud - Sleuth 实现调用链监控

我们采用Spring Cloud Hoxton.SR3, Spring Cloud Alibaba 2.2.0.RELEASE, Spring Boot 2.2.6 RELEASE



# SpringCloud整合Nacos注册中心

# Spring Cloud 整合 OpenFeign实现声明式远程调用
Feign声明式的HTTP客户端，让远程调用更简单。
提供了HTTP请求的模板，编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息
整合了Ribbon（负载均衡组件）和Hystix（服务熔断组件），不需要显示使用这两个组件
Spring Cloud Feign 在Netflix Feign的基础上扩展了对SpringMVC注解的支持


# Spring Cloud 整合 Nacos配置中心
application.properties文件中定义两个配置
示例控制器中定义私有变量nickname和age，@value代表从配置中取值

总结：从配置文件中获取配置。

这种方式的缺点是什么呢？如果要修改配置参数，则需要重新启动服务。如果服务很多，则需要重启所有服务，非常不方便。

有没有什么办法不停服务修改配置而且使其生效呢？

答案：有的，用Spring Cloud Alibaba的Nacos 组件就可以完成。

# Spring Cloud 整合Gateway网关
网关:流量的入口
网关常用功能:路由转发,权限校验,限流控制
Spring Cloud Gateway是Spring Cloud官方推出的第二代网关框架
Spring Cloud Gateway取代了netflix的Zuul网关

请求先访问到API网关
API网关通过注册中心实时感知微服务的状态和路由地址,准确地将请求路由到各个服务

请求到达网关后,先经过断言Predicate,是否符合某个路由规则
如果符合,则按路由规则路由到指定地址
请求和响应都可以通过过滤器Filter进行过滤


# 整合OSS对象存储
还挺简单

文件上传在系统中用的很频繁，我们需要将上传的文件进行存储，传统的将文件上传到本机已不适用分布式系统。
自己搭建文件服务器有复杂性和维护成本。所以我们可以采用市面上成熟的文件存储服务，如阿里云的OSS对象存储服务。

每个 OSS 的用户都会用到上传服务。Web 端常见的上传方法是用户在浏览器或 APP 端上传文件到应用服务器，应用服务器再把文件上传到 OSS。




# SpringCloud整合统一异常处理
我们在写代码的时候，通常会在方法里面添加各种try catch来捕获异常，会发现有很多重复的代码，所以我们可以整合统一异常处理来优化代码结构。
拦截异常并统一处理我们可以用到@RestControllerAdvice注解

自定义异常处理类
- 添加统一异常处理类注解@RestControllerAdvice
- 添加日志注解@Slf4j
- 添加异常处理方法注解@ExceptionHandler

# Elasticsearch
别只会搜日志了，求你懂点检索原理吧

我们把检索服务单独作为一个服务。就称作 passjava-search 模块吧。
接下来我们添加一个 ES 服务的专属配置类，主要目的是自动加载一个 ES Client 来供后续 ES API 使用，不用每次都 new 一个 ES Client。


# ES 高级实战

# ES 终于可以搜到“悟空哥”了！

# 微服务架构中的链路追踪
实践部分涉及到如何把链路追踪 Sleuth + Zipkin 加到我的 Spring Cloud 《佳必过》开源项目上。
本篇知识点：

- 链路追踪基本原理
- 如何在项目中轻松加入链路追踪中间件
- 如何使用链路追踪排查问题。

比如一个请求需要调用多个服务才能完成整个业务闭环，而内部服务的代码逻辑和业务逻辑比较复杂，假如某个服务出现了问题，是难以快速确定那个服务出问题的。
而如果我们加上了分布式链路追踪，去跟踪一个请求有哪些服务参与其中，参与的顺序是怎样的，
这样我们就知道了每个请求的详细经过，即使出了问题也能快速定位。

链路追踪组件有 Twitter 的可视化链路追踪组件 Zipkin、Google 的 Dapper、阿里的 Eagleeye 等，而 Sleuth 是 Spring Cloud 的组件。
Spring Cloud Sleuth 借鉴了 Dapper 的术语。

本文主要讲解 Sleuth + Zipkin 结合使用来更好地实现链路追踪。
为什么能够进行整条链路的追踪？其实就是一个 Trace ID 将 一连串的 Span 信息连起来了。根据 Span 记录的信息再进行整合就可以获取整条链路的信息。
2.1 Span（跨度）
大白话：远程调用和 Span 一对一。
基本的工作单元，每次发送一个远程调用服务就会产生一个 Span。
Span 是一个 64 位的唯一 ID。
通过计算 Span 的开始和结束时间，就可以统计每个服务调用所花费的时间。

2.2 Trace（跟踪）
大白话：一个 Trace 对应多个 Span，一对多。
它由一系列 Span 组成，树状结构。
64 位唯一 ID。
每次客户端访问微服务系统的 API 接口，可能中间会调用多个微服务，每次调用都会产生一个新的 Span，而多个 Span 组成了 Trace

2.3 Annotation（注解）
链路追踪系统定义了一些核心注解，用来定义一个请求的开始和结束，注意是微服务之间的请求，而不是浏览器或手机等设备。注解包括：








# 48 张图 | 手把手教你微服务的性能监控、压测和调优

# 缓存实战








